# -*- coding: utf-8 -*-
"""
Created on Mon Aug 24 15:12:53 2020

@author: Kilder
"""
from os import listdir

import pandas as pd

def reading_class(textfile: str, file_identifier: bool = True, encoding: str = 'utf8') -> pd.DataFrame:
    '''
        Reads chat data registered as .txt as generated by BlackBoard,
    returns a properly formatted pandas DataFrame with columns for the timestamps,
    the username and the message. Additionally, if file_identifier is set to TRUE,
    adds a constant column where the name of the original textfile is repeated
    for all rows, for identifying purposes when dealing with multiple chat registries.

    Parameters
    ----------
    textfile : str
        path of the chat data as .txt
    file_identifier : bool, optional
        The default is True. Adds a column with the name of the textfile
    encoding: str, optional
        Encoding used to read the text file. The default is utf8.

    Returns
    -------
    pd.DataFrame
        A DataFrame with timestamp-start, timestamp-end, user, message and (optionally) filename columns

    '''
    data = {'timestamp-start':[],
            'timestamp-end':[],
            'user':[],
            'message':[]}
    timestamp = '00:00:00.000'
    try:
        open(textfile, encoding='utf8')
    except FileNotFoundError:
        print('File not found:', textfile)
    for line in open(textfile, encoding=encoding):
        if ('-->' in line) and (':' in line):
            timestamp = line
            timestamp = timestamp.split('\n')[0]
            tstart, tend = timestamp.split(' --> ')
        if '<v' in line:
            try:
                user, message, *_ = line.split('>')
            except:
                print('error on file', textfile)
                print('error on line', line)
            data['timestamp-start'].append(tstart)
            data['timestamp-end'].append(tend)
            data['user'].append(user.split('<v ')[1])
            data['message'].append(message.split('\n')[0])            
    clean_data = pd.DataFrame(data)
    if file_identifier:
        clean_data['filename'] = textfile
        
    return clean_data

def process_data_on_current_dir(path: str) -> pd.DataFrame:
    '''
    Creates 'chatInterventions', a complete DataFrame with all chat interventions
    
    Parameters
    ----------
    
    path: str
        path where the text files live.

    Returns
    -------
    A pandas DataFrame with all chats parsed and appenden of all text files in
    the directory.

    '''
    chat_interventions = pd.DataFrame()
    for filename in listdir(path):
        if '.txt' not in filename:
            continue
        filepath = path + '/' + filename
        print('reading', filepath)
        try:
            chat_interventions = chat_interventions.append(reading_class(filepath))    
        except:
            print('error on', filepath)

    return chat_interventions
            
chatInterventions = process_data_on_current_dir('raw_data/oldchats')
chatInterventions.to_csv('processed_data/chat_data.csv')

listdir('raw_data/oldchats')
